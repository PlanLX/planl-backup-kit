version: '3.8'

services:
  # Elasticsearch 快照工具
  es-snapshot-tool:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - PIP_INDEX_URL=https://mirrors.aliyun.com/pypi/simple
    container_name: es-snapshot-tool
    env_file:
      - .env
    environment:
      # 日志级别
      - PYTHONUNBUFFERED=1
    networks:
      - es-network
    # 示例命令：docker-compose run --rm es-snapshot-tool init --output /app/config/config.yaml

  # 开发环境 - 包含 Elasticsearch 集群
  elasticsearch:
    image: elasticsearch:7.17.28
    user: 1000:1000
    container_name: elasticsearch
    depends_on:
      - es-init
    environment:
      - node.name=elasticsearch
      - cluster.name=elasticsearch
      - discovery.seed_hosts=elasticsearch
      - cluster.initial_master_nodes=elasticsearch
      - network.host=0.0.0.0
      - xpack.security.enabled=false
      - cluster.deprecation_indexing.enabled=false
      - ES_JAVA_OPTS=-Xmx512m -Xms512m
      - node.data=true
      - node.ingest=true
      - node.master=true
      - node.ml=true
      - node.remote_cluster_client=true
      - ES_SKIP_SET_KERNEL_PARAMETERS=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - path.repo=/usr/share/elasticsearch/data/snapshots
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - es-network
    volumes:
      - es-data:/usr/share/elasticsearch/data
      - es-plugins:/usr/share/elasticsearch/plugins
      - es-config:/usr/share/elasticsearch/config
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/"]
      interval: 15s
      timeout: 15s
      retries: 10
      start_period: 30s
  # Elasticsearch 初始化服务（合并了插件安装和密钥库设置）
  es-init:
    image: elasticsearch:7.17.28
    # user: 1000:1000
    env_file:
      - .env
    volumes:
      - es-plugins:/usr/share/elasticsearch/plugins
      - es-config:/config
    working_dir: /usr/share/elasticsearch
    command: 
      - /bin/bash
      - -c
      - |
        set -e
        
        # 安装 S3 存储库插件
        echo "Installing S3 repository plugin..."
        if [ ! -d /usr/share/elasticsearch/plugins/repository-s3 ]; then
          bin/elasticsearch-plugin install --batch repository-s3
          echo "S3 repository plugin installed"
        else
          echo "S3 repository plugin already installed"
        fi
        
        # 切换到配置目录
        cd /usr/share/elasticsearch/config
        
        # 创建密钥库
        if [[ ! -f elasticsearch.keystore ]]; then
          echo "Creating keystore..."
          elasticsearch-keystore create
        fi

        # 设置 Elastic 密码
        if [[ -n "$ELASTIC_PASSWORD" ]]; then
          if ! (elasticsearch-keystore has-passwd --silent); then
            if ! (elasticsearch-keystore list | grep -q '^bootstrap.password$'); then
              echo "$ELASTIC_PASSWORD" | elasticsearch-keystore add -x 'bootstrap.password'
            fi
          else
            if ! (echo "$ES_KEYSTORE_PASS" | elasticsearch-keystore list | grep -q '^bootstrap.password$'); then
              printf "%s\n%s" "$ES_KEYSTORE_PASS" "$ELASTIC_PASSWORD" | elasticsearch-keystore add -x 'bootstrap.password'
            fi
          fi
        fi

        # 设置 AWS 凭证
        if ! (elasticsearch-keystore has-passwd --silent); then
          echo "$AWS_ACCESS_KEY_ID" | elasticsearch-keystore add -x s3.client.default.access_key
          echo "$AWS_SECRET_ACCESS_KEY" | elasticsearch-keystore add -x s3.client.default.secret_key
        else
          printf "%s\n%s\n%s" "$ES_KEYSTORE_PASS" "$AWS_ACCESS_KEY_ID" "$AWS_SECRET_ACCESS_KEY" | \
            elasticsearch-keystore add -x s3.client.default.access_key
          printf "%s\n%s\n%s" "$ES_KEYSTORE_PASS" "$AWS_ACCESS_KEY_ID" "$AWS_SECRET_ACCESS_KEY" | \
            elasticsearch-keystore add -x s3.client.default.secret_key
        fi

        # 复制配置文件到共享卷
        cp -r /usr/share/elasticsearch/config/* /config/
        chown -R 1000:1000 /config/elasticsearch.keystore
        echo "Keystore setup complete"
  # Kibana (可选，用于管理界面)
  kibana:
    image: kibana:7.17.28
    container_name: kibana
    user: 1000:1000
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_NAME=kibana
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - es-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601/"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MinIO (用于开发测试的 S3 兼容对象存储)
  minio:
    image: minio/minio:RELEASE.2023-05-18T00-05-36Z
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    networks:
      - es-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/ready"]
      interval: 30s
      timeout: 20s
      retries: 3

  # elasticsearch-log-maker:
  #   image: opennetworking/utils:bash-curl-jq
  #   container_name: elasticsearch-log-maker
  #   depends_on:
  #     elasticsearch:
  #       condition: service_healthy
  #   command:
  #       - "sleep"
  #       - "3600"
    # # - /bin/sh
    # # - -c
    # # - |
    #   echo "Waiting for Elasticsearch to become available..."
    #   until curl -s http://elasticsearch:9200/_cluster/health?wait_for_status=yellow | jq -e '.status' > /dev/null; do
    #     echo "Elasticsearch not ready, retrying in 2s..."
    #     sleep 2
    #   done
    #   echo "Elasticsearch is ready. Starting log generation..."
    #   i=1
    #   while [ "$i" -le 1000 ]; do
    #     curl -s -X POST http://elasticsearch:9200/logs/_doc \
    #       -H 'Content-Type: application/json' \
    #       -d "{\"message\": \"log $i\", \"timestamp\": \"$(date -Iseconds)\"}"
    #     i=$((i+1))
    #     sleep 0.01
    #   done
    #   echo "Done sending logs. Sleeping..."
    #   sleep 3600
      
    # networks:
    #   - es-network
volumes:
  es-data:
    driver: local
  es-plugins:
    driver: local
  es-config:
    driver: local
  minio-data:
    driver: local

networks:
  es-network:
    driver: bridge